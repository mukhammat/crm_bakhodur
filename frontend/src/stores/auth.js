import { defineStore } from 'pinia'

const SERVER = '';

export const useAuthStore = defineStore('auth', {
  state: () => {
    const token = localStorage.getItem('token') || null
    console.log('üîç Auth Store initialized, token:', token ? 'EXISTS' : 'NULL')
    return {
      user: null,
      token: token,
      tokenExpiryTimer: null
    }
  },

  getters: {
    role: (state) => state.user?.role || null,
    isAuthenticated: (state) => !!state.token
  },

  actions: {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    setTokenExpiry(expiresIn) {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.tokenExpiryTimer) {
        clearTimeout(this.tokenExpiryTimer)
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
      // expiresIn - –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      const expiryTime = expiresIn * 1000
      
      this.tokenExpiryTimer = setTimeout(() => {
        console.warn('Token expired, logging out...')
        this.logout()
        
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        // –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        if (window.location.pathname !== '/login') {
          window.location.href = '/login?reason=session_expired'
        }
      }, expiryTime)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ localStorage –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      const expiryTimestamp = Date.now() + expiryTime
      localStorage.setItem('tokenExpiry', expiryTimestamp.toString())
    },

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkTokenExpiry() {
      const expiryTimestamp = localStorage.getItem('tokenExpiry')
      
      if (!expiryTimestamp) return false

      const now = Date.now()
      const expiry = parseInt(expiryTimestamp, 10)

      if (now >= expiry) {
        // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫
        this.logout()
        return true
      }

      // –¢–æ–∫–µ–Ω –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
      const remainingTime = Math.floor((expiry - now) / 1000)
      this.setTokenExpiry(remainingTime)
      return false
    },

    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ '24h', '7d', '60s' –≤ —Å–µ–∫—É–Ω–¥—ã
    parseExpiresIn(expiresIn) {
      if (typeof expiresIn === 'number') return expiresIn

      const match = expiresIn.match(/^(\d+)([smhd])$/)
      if (!match) return 3600 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å

      const value = parseInt(match[1], 10)
      const unit = match[2]

      const units = {
        s: 1,           // —Å–µ–∫—É–Ω–¥—ã
        m: 60,          // –º–∏–Ω—É—Ç—ã
        h: 3600,        // —á–∞—Å—ã
        d: 86400        // –¥–Ω–∏
      }

      return value * (units[unit] || 3600)
    },

    async login({ email, password }) {
      console.log('üîê Login attempt for:', email)
      try {
        const res = await fetch(`${SERVER}/api/auth/login`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, password })
        })

        if (!res.ok) {
          const errorData = await res.json()
          throw new Error(errorData.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
        }

        const { data } = await res.json()
        console.log('‚úÖ Login response:', data)
        
        this.token = data.token
        localStorage.setItem('token', this.token)
        console.log('üíæ Token saved to localStorage')

        // –ü–∞—Ä—Å–∏–º expiresIn (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç '24h', 3600, –∏ —Ç.–¥.)
        const expiresInSeconds = data.expiresIn 
          ? this.parseExpiresIn(data.expiresIn)
          : 3600

        console.log('‚è∞ Token expires in:', expiresInSeconds, 'seconds')
        this.setTokenExpiry(expiresInSeconds)
        
        await this.fetchMe()
        console.log('üë§ User loaded:', this.user)
      } catch (error) {
        console.error('‚ùå Login error:', error)
        this.logout()
        throw error
      }
    },

    async register(dto) {
      try {
        const res = await fetch(`${SERVER}/api/auth/register`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(dto)
        })

        if (!res.ok) {
          const errorData = await res.json()
          throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        }

        const responseData = await res.json()
        await this.login({
          email: dto.email,
          password: dto.password
        })

        return responseData.data?.userId
      } catch (error) {
        this.logout()
        throw error
      }
    },

    async fetchMe() {
      if (!this.token) return

      try {
        const res = await fetch(`${SERVER}/api/users/me`, {
          headers: { Authorization: `Bearer ${this.token}` }
        })

        if (!res.ok) {
          if (res.status === 401) {
            this.logout()
            throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')
          }
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        }

        const { data } = await res.json()
        this.user = data
      } catch (error) {
        if (error.message.includes('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')) {
          this.logout()
        }
        throw error
      }
    },

    logout() {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
      if (this.tokenExpiryTimer) {
        clearTimeout(this.tokenExpiryTimer)
        this.tokenExpiryTimer = null
      }

      this.user = null
      this.token = null
      localStorage.removeItem('token')
      localStorage.removeItem('tokenExpiry')
    },

    async init() {
      if (this.token) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
        const isExpired = this.checkTokenExpiry()
        
        if (!isExpired) {
          try {
            await this.fetchMe()
          } catch (error) {
            console.warn('Failed to restore user session:', error.message)
          }
        }
      }
    }
  }
})